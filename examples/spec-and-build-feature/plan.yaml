name: Weather CLI Feature
prompt: |
  We are building a Python module that provides a simple CLI for getting weather reports.

  Functional Requirements:
  - The user can get the weather report for a specific location.
  - If not specified, the CLI asks for the location
  - There should be options to get the weather report in Celsius or Fahrenheit

  Non-functional Requirements:
  - The CLI is implemented in Python using click and rich
  - The CLI should be easy to use.
  - It should use a free weather API.
  - The CLI should be able to handle errors gracefully.
  - There should be a file with pytests for the CLI's main functionality 
  - There should be a README.md file with instructions on how to use the CLI

steps:
  - name: Implement CLI
    output_file: weather_cli.py
    code: true
    prompt: |
      We are building a Python module that provides a simple CLI for getting weather reports.

      You need to implement `weather_cli.py` to provide the main CLI functionality.
      Follow these steps:
        1. Import necessary libraries: `click` for CLI commands, `requests` for API calls, and `rich` for rich text formatting.
        2. Define a function `get_weather` that takes a location and a unit (Celsius or Fahrenheit) as arguments and returns the weather report using a free weather API (e.g., OpenWeatherMap).
        3. Define a function `print_weather` that takes the weather data and prints it using `rich`.
        4. Define the main CLI command using `click`. This command should:
           - Accept a location as an argument (optional).
           - Accept a unit option (Celsius or Fahrenheit).
           - If the location is not provided, prompt the user to enter it.
           - Call `get_weather` with the provided location and unit.
           - Call `print_weather` to display the weather report.
        5. Add error handling to manage API errors, invalid locations, and other potential issues gracefully.

  - name: Implement Tests
    output_file: test_weather_cli.py
    code: true
    prompt: |
      We are building a Python module that provides a simple CLI for getting weather reports.
      
      Content of `weather_cli.py`:
      ```python
      {{ sh('cat weather_cli.py') }}
      ```

      You need to implement `test_weather_cli.py` to provide tests for the CLI's main functionality.
      Follow these steps:
        1. Import necessary libraries: `pytest` for testing and `click.testing` for testing Click commands.
        2. Write tests for the `get_weather` function to ensure it correctly fetches weather data for valid locations and handles errors for invalid locations.
        3. Write tests for the main CLI command to ensure it correctly handles user input, calls `get_weather`, and prints the weather report.
        4. Use fixtures to mock API responses for testing purposes.

  - name: Write README
    output_file: README.md
    code: true
    prompt: |
      We are building a Python module that provides a simple CLI for getting weather reports.

      You need to implement `README.md` to provide instructions on how to use the CLI.
      
      Content of `weather_cli.py`:
      ```python
      {{ sh('cat weather_cli.py') }}
      ```
      
      Follow these steps:
        1. Write a brief introduction to the CLI and its functionality.
        2. Provide installation instructions, including any necessary dependencies.
        3. Provide usage instructions, including examples of how to get weather reports for specific locations and how to specify the unit (Celsius or Fahrenheit).
        4. Include a section on error handling and how the CLI manages potential issues.
        5. Provide instructions for running the tests.